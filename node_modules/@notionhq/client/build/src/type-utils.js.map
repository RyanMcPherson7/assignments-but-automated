{"version":3,"file":"type-utils.js","sourceRoot":"","sources":["../../src/type-utils.ts"],"names":[],"mappings":";AAAA;;GAEG","sourcesContent":["/**\n * Utilities for working with typescript types\n */\n\n// Make a named property in a type required\nexport type RequiredBy<T, K extends keyof T> = Omit<T, K> & Required<Pick<T, K>>\n\n// Make a named property in a type optional\nexport type PartialBy<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\n\n// from: https://stackoverflow.com/questions/57103834/typescript-omit-a-property-from-all-interfaces-in-a-union-but-keep-the-union-s\n//\n// Given a type union, omit a field from every member of it\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DistributiveOmit<T, K extends keyof any> = T extends any\n  ? Omit<T, K>\n  : never\n\n// Given a type union, add a field to every member of it\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type DistributiveExtend<T, K extends any> = T extends any ? T & K : never\n\n/**\n * Unwrap the type of a promise\n */\nexport type Await<T> = T extends {\n  then(onfulfilled?: (value: infer U) => unknown): unknown\n}\n  ? U\n  : T\n\n/**\n * Assert U is assignable to T.\n */\nexport type Assert<T, U extends T> = U\n"]}
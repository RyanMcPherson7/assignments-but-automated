/// <reference types="node" />
import { Readable } from "stream";
import { inspect } from "util";
import { File } from "./File";
export declare type FormDataFieldValue = string | File;
/**
 * Additional field options.
 *
 * @deprecated The options argument is non-standard and will be removed from this package in the next major release (4.x).
 */
export interface FormDataFieldOptions {
    /**
     * Returns the media type ([`MIME`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types)) of the file represented by a `File` object.
     */
    type?: string;
    /**
     * The last modified date of the file as the number of milliseconds since the Unix epoch (January 1, 1970 at midnight). Files without a known last modified date return the current date.
     */
    lastModified?: number;
    /**
     * The name of the file.
     */
    filename?: string;
}
/**
 * Constructor entries for FormData
 */
export declare type FormDataConstructorEntries = Array<{
    name: string;
    value: unknown;
    filename?: string;
    options?: FormDataFieldOptions;
}>;
/**
 * Provides a way to easily construct a set of key/value pairs representing form fields and their values, which can then be easily sent using fetch().
 *
 * Note that this object is not a part of Node.js, so you might need to check is an HTTP client of your choice support spec-compliant FormData.
 * However, if your HTTP client does not support FormData, you can use [`form-data-encoder`](https://npmjs.com/package/form-data-encoder) package to handle "multipart/form-data" encoding.
 */
export declare class FormData {
    #private;
    /**
     * Returns headers for multipart/form-data
     *
     * @deprecated FormData#headers property is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    get headers(): {
        "Content-Type": string;
        "Content-Length": string;
    };
    /**
     * Returns internal readable stream, allowing to read the FormData content
     *
     * @deprecated FormData#stream property is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    get stream(): Readable;
    /**
     * @deprecated FormData#boundary property is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    get boundary(): string;
    constructor(entries?: FormDataConstructorEntries);
    /**
     * Returns computed length of the FormData content.
     *
     * @deprecated FormData#getComputedLength() method is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    getComputedLength(): number;
    /**
     * Appends a new value onto an existing key inside a FormData object,
     * or adds the key if it does not already exist.
     *
     * @param name The name of the field whose data is contained in value
     * @param value The field value. You can pass any primitive type
     *   (including null and undefined), Buffer or Readable stream.
     *   Note that Arrays and Object will be converted to string
     *   by using String function.
     * @param filename A filename of given field.
     * @param options Additional field options.
     */
    append(name: string, value: unknown): void;
    append(name: string, value: unknown, filename?: string): void;
    append(name: string, value: unknown, options?: FormDataFieldOptions & {
        filename?: string;
    }): void;
    append(name: string, value: unknown, filename?: string, options?: FormDataFieldOptions): void;
    /**
     * Set a new value for an existing key inside FormData,
     * or add the new field if it does not already exist.
     *
     * @param name The name of the field whose data is contained in value
     * @param value The field value. You can pass any primitive type
     *   (including null and undefined), Buffer or Readable stream.
     *   Note that Arrays and Object will be converted to string
     *   by using String function.
     * @param filename A filename of given field.
     * @param options Additional field options.
     *
     */
    set(name: string, value: unknown): void;
    set(name: string, value: unknown, filename?: string): void;
    set(name: string, value: unknown, options?: FormDataFieldOptions & {
        filename?: string;
    }): void;
    set(name: string, value: unknown, filename?: string, options?: FormDataFieldOptions): void;
    /**
     * Returns the first value associated with the given name.
     * Buffer and Readable values will be returned as-is.
     *
     * @param {string} name A name of the value you want to retrieve.
     */
    get(name: string): FormDataFieldValue | null;
    /**
     * Returns all the values associated with
     * a given key from within a FormData object.
     *
     * @param {string} name A name of the value you want to retrieve.
     */
    getAll(name: string): FormDataFieldValue[];
    /**
     * Check if a field with the given name exists inside FormData.
     *
     * @param name A name of the field you want to test for.
     *
     * @return
     */
    has(name: string): boolean;
    /**
     * Deletes a key and its value(s) from a FormData object.
     *
     * @param name The name of the key you want to delete.
     */
    delete(name: string): void;
    /**
     * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the **FormData** keys
     */
    keys(): Generator<string>;
    /**
     * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the **FormData** key/value pairs
     */
    entries(): Generator<[string, FormDataFieldValue]>;
    /**
     * Returns an [`iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols) allowing to go through the **FormData** values
     */
    values(): Generator<FormDataFieldValue>;
    /**
     * An alias for FormData#entries()
     */
    [Symbol.iterator](): Generator<[string, FormDataFieldValue], any, unknown>;
    /**
     * Executes given callback function for each field of the FormData instance
     */
    forEach(fn: (value: FormDataFieldValue, key: string, fd: FormData) => void, ctx?: unknown): void;
    get [Symbol.toStringTag](): string;
    [inspect.custom](): string;
    /**
     * Returns an async iterator allowing to read form-data body using **for-await-of** syntax.
     * Read the [`async iteration proposal`](https://github.com/tc39/proposal-async-iteration) to get more info about async iterators.
     *
     * @deprecated FormData#[Symbol.asyncIterator]() method is non-standard and will be removed from this package in the next major release (4.x). Use https://npmjs.com/form-data-encoder package to serilize FormData.
     */
    [Symbol.asyncIterator](): AsyncGenerator<Uint8Array, void, undefined>;
}

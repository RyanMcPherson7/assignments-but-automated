var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _FormData_instances, _FormData_stream, _FormData_encoder, _FormData_content, _FormData_setField;
import { Readable } from "stream";
import { basename } from "path";
import { inspect } from "util";
import { FormDataEncoder } from "form-data-encoder";
import { File } from "./File.js";
import { fileFromPathSync } from "./fileFromPath.js";
import { deprecateBoundary, deprecateHeaders, deprecateStream, deprecateBuffer, deprecateReadStream, deprecateOptions, deprecateGetComputedLength, deprecateSymbolAsyncIterator } from "./util/deprecations.js";
import isFile from "./util/isFile.js";
import isPlainObject from "./util/isPlainObject.js";
import isReadStream from "./util/isReadStream.js";
import getFilename from "./util/getFilename.js";
const { isBuffer } = Buffer;
export class FormData {
    constructor(entries) {
        _FormData_instances.add(this);
        _FormData_stream.set(this, void 0);
        _FormData_encoder.set(this, void 0);
        _FormData_content.set(this, new Map());
        __classPrivateFieldSet(this, _FormData_encoder, new FormDataEncoder(this), "f");
        if (entries) {
            entries.forEach(({ name, value, filename, options }) => this.append(name, value, filename, options));
        }
    }
    get headers() {
        deprecateHeaders();
        return __classPrivateFieldGet(this, _FormData_encoder, "f").headers;
    }
    get stream() {
        deprecateStream();
        if (!__classPrivateFieldGet(this, _FormData_stream, "f")) {
            __classPrivateFieldSet(this, _FormData_stream, Readable.from(this), "f");
        }
        return __classPrivateFieldGet(this, _FormData_stream, "f");
    }
    get boundary() {
        deprecateBoundary();
        return __classPrivateFieldGet(this, _FormData_encoder, "f").boundary;
    }
    getComputedLength() {
        deprecateGetComputedLength();
        return __classPrivateFieldGet(this, _FormData_encoder, "f").getContentLength();
    }
    append(name, value, filenameOrOptions, options) {
        return __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_setField).call(this, {
            name,
            value,
            filenameOrOptions,
            options,
            append: true,
            argsLength: arguments.length
        });
    }
    set(name, value, filenameOrOptions, options) {
        return __classPrivateFieldGet(this, _FormData_instances, "m", _FormData_setField).call(this, {
            name,
            value,
            filenameOrOptions,
            options,
            append: false,
            argsLength: arguments.length
        });
    }
    get(name) {
        const field = __classPrivateFieldGet(this, _FormData_content, "f").get(String(name));
        if (!field) {
            return null;
        }
        return field[0];
    }
    getAll(name) {
        const field = __classPrivateFieldGet(this, _FormData_content, "f").get(String(name));
        if (!field) {
            return [];
        }
        return [...field];
    }
    has(name) {
        return __classPrivateFieldGet(this, _FormData_content, "f").has(String(name));
    }
    delete(name) {
        return void __classPrivateFieldGet(this, _FormData_content, "f").delete(String(name));
    }
    *keys() {
        for (const key of __classPrivateFieldGet(this, _FormData_content, "f").keys()) {
            yield key;
        }
    }
    *entries() {
        for (const name of this.keys()) {
            const values = this.getAll(name);
            for (const value of values) {
                yield [name, value];
            }
        }
    }
    *values() {
        for (const [, value] of this) {
            yield value;
        }
    }
    [(_FormData_stream = new WeakMap(), _FormData_encoder = new WeakMap(), _FormData_content = new WeakMap(), _FormData_instances = new WeakSet(), _FormData_setField = function _FormData_setField({ name, value, append, filenameOrOptions, options, argsLength }) {
        const methodName = append ? "append" : "set";
        name = String(name);
        if (Buffer.isBuffer(value)) {
            deprecateBuffer();
        }
        if (isReadStream(value)) {
            deprecateReadStream();
        }
        let filename;
        if (isPlainObject(filenameOrOptions)) {
            [options, filename] = [filenameOrOptions, undefined];
        }
        else {
            filename = filenameOrOptions;
        }
        if (isPlainObject(options)) {
            deprecateOptions();
        }
        if (argsLength < 2) {
            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `
                + `2 arguments required, but only ${argsLength} present.`);
        }
        filename || (filename = options === null || options === void 0 ? void 0 : options.filename);
        if (isFile(value) || isReadStream(value) || isBuffer(value)) {
            filename = basename(filename || getFilename(value));
        }
        else if (filename) {
            throw new TypeError(`Failed to execute '${methodName}' on 'FormData': `
                + "parameter 2 is not one of the following types: "
                + "ReadStream | Buffer | File | Blob");
        }
        if (isReadStream(value)) {
            value = fileFromPathSync(String(value.path), filename, options);
        }
        else if (isBuffer(value)) {
            value = new File([value], filename, options);
        }
        else if (isFile(value)) {
            value = new File([value], filename, {
                ...options,
                type: (options === null || options === void 0 ? void 0 : options.type) || value.type,
                lastModified: (options === null || options === void 0 ? void 0 : options.lastModified) || value.lastModified
            });
        }
        else {
            value = String(value);
        }
        const values = __classPrivateFieldGet(this, _FormData_content, "f").get(name);
        if (!values) {
            return void __classPrivateFieldGet(this, _FormData_content, "f").set(name, [value]);
        }
        if (!append) {
            return void __classPrivateFieldGet(this, _FormData_content, "f").set(name, [value]);
        }
        values.push(value);
    }, Symbol.iterator)]() {
        return this.entries();
    }
    forEach(fn, ctx) {
        for (const [name, value] of this) {
            fn.call(ctx, value, name, this);
        }
    }
    get [Symbol.toStringTag]() {
        return "FormData";
    }
    [inspect.custom]() {
        return this[Symbol.toStringTag];
    }
    async *[Symbol.asyncIterator]() {
        deprecateSymbolAsyncIterator();
        yield* __classPrivateFieldGet(this, _FormData_encoder, "f").encode();
    }
}
